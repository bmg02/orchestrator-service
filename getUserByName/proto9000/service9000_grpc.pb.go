// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto9000

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserService9000Client is the client API for UserService9000 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserService9000Client interface {
	GetUserByName(ctx context.Context, in *RequestFor9000, opts ...grpc.CallOption) (*ResponseFor9000, error)
}

type userService9000Client struct {
	cc grpc.ClientConnInterface
}

func NewUserService9000Client(cc grpc.ClientConnInterface) UserService9000Client {
	return &userService9000Client{cc}
}

func (c *userService9000Client) GetUserByName(ctx context.Context, in *RequestFor9000, opts ...grpc.CallOption) (*ResponseFor9000, error) {
	out := new(ResponseFor9000)
	err := c.cc.Invoke(ctx, "/proto9000.UserService9000/GetUserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserService9000Server is the server API for UserService9000 service.
// All implementations should embed UnimplementedUserService9000Server
// for forward compatibility
type UserService9000Server interface {
	GetUserByName(context.Context, *RequestFor9000) (*ResponseFor9000, error)
}

// UnimplementedUserService9000Server should be embedded to have forward compatible implementations.
type UnimplementedUserService9000Server struct {
}

func (UnimplementedUserService9000Server) GetUserByName(context.Context, *RequestFor9000) (*ResponseFor9000, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByName not implemented")
}

// UnsafeUserService9000Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserService9000Server will
// result in compilation errors.
type UnsafeUserService9000Server interface {
	mustEmbedUnimplementedUserService9000Server()
}

func RegisterUserService9000Server(s grpc.ServiceRegistrar, srv UserService9000Server) {
	s.RegisterService(&UserService9000_ServiceDesc, srv)
}

func _UserService9000_GetUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFor9000)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserService9000Server).GetUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto9000.UserService9000/GetUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserService9000Server).GetUserByName(ctx, req.(*RequestFor9000))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService9000_ServiceDesc is the grpc.ServiceDesc for UserService9000 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService9000_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto9000.UserService9000",
	HandlerType: (*UserService9000Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByName",
			Handler:    _UserService9000_GetUserByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service9000.proto",
}
